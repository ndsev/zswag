name: Build and Deploy

on:
  push:
    branches: [master]
    tags: ['v*']
  pull_request:
  workflow_dispatch:
    inputs:
      ref:
        description: Branch, tag, or commit to build a snapshot from
        default: master
        required: true
      release_notes:
        description: Optional notes for this snapshot release
        required: false

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.ref }}
          fetch-depth: 0
          fetch-tags: true
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: pip install setuptools_scm packaging
      
      - name: Get version
        id: version
        run: |
          python .github/scripts/determine_version.py \
            --event "${{ github.event_name }}" \
            --ref "${{ github.event.inputs.ref || github.ref_name }}"

  build-manylinux:
    needs: [determine-version]
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        arch: ["x86_64", "aarch64"]
    runs-on: ${{ matrix.arch == 'aarch64' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    container: ghcr.io/klebert-engineering/manylinux-cpp17-py${{ matrix.python-version }}-${{ matrix.arch }}:2025.1
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
      SETUPTOOLS_SCM_PRETEND_VERSION: ${{ needs.determine-version.outputs.version }}
    steps:
      - name: Which Node.js?
        run: |
          echo "Node at $(which node): $(node -v); npm: $(npm -v)"
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.ref }}
          submodules: recursive
      - name: Configure
        run: |
          python3 -m venv venv && . ./venv/bin/activate
          pip install -U setuptools wheel pip
          mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -DZSWAG_ENABLE_TESTING=ON -DZSWAG_VERSION="${{ needs.determine-version.outputs.version }}" ..
      - name: Build
        working-directory: build
        run: |
          export LD_LIBRARY_PATH=$(pwd)/bin:${LD_LIBRARY_PATH}
          . ../venv/bin/activate
          cmake --build .
          mv bin/wheel bin/wheel-auditme
          mkdir bin/wheel && mv bin/wheel-auditme/zswag*.whl bin/wheel
          auditwheel repair bin/wheel-auditme/pyzswagcl*.whl -w bin/wheel
      - name: Test
        working-directory: build
        run: |
          . ../venv/bin/activate
          ctest -C Release --verbose --no-tests=error
      - name: Deploy
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.arch }}-py${{ matrix.python-version }}
          path: build/bin/wheel/*.whl
  
  build:
    needs: [determine-version]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macos-13: Intel-based runners (x86_64)
        # macos-14: Apple Silicon runners (arm64)
        os: [macos-13, macos-14, windows-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        exclude:
          # Python 3.10 doesn't have ARM64 builds for macOS
          - os: macos-14
            python-version: "3.10"
    env:
      SETUPTOOLS_SCM_PRETEND_VERSION: ${{ needs.determine-version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.ref }}
        submodules: recursive
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64
    - run: python -m pip install setuptools wheel
    - run: mkdir build
    - name: Build (macOS)
      if: startsWith(matrix.os, 'macos')
      working-directory: build
      run: |
        # Set deployment target based on architecture
        # macos-13 = Intel x86_64, macos-14 = Apple Silicon arm64
        if [[ "${{ matrix.os }}" == "macos-13" ]]; then
          export MACOSX_DEPLOYMENT_TARGET=10.15
        else
          export MACOSX_DEPLOYMENT_TARGET=11.0  # ARM64 requires macOS 11.0+
        fi
        python -m pip install delocate
        cmake -DPython3_ROOT_DIR=$pythonLocation \
              -DPython3_FIND_FRAMEWORK=LAST \
              -DCMAKE_BUILD_TYPE=Release \
              -DHTTPLIB_USE_BROTLI_IF_AVAILABLE=OFF \
              -DZSWAG_ENABLE_TESTING=ON \
              -DZSWAG_VERSION=${{ needs.determine-version.outputs.version }} ..
        cmake --build .
        mv bin/wheel bin/wheel-auditme  # Same as on Linux
        mkdir bin/wheel && mv bin/wheel-auditme/zswag*.whl bin/wheel
        _deps/python-cmake-wheel-src/repair-wheel-macos.bash \
              "$(pwd)"/bin/wheel-auditme/pyzswagcl*.whl \
              "$(pwd)"/bin/wheel pyzswagcl
    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: build
      run: |
        # Install NASM and jom using chocolatey (required for OpenSSL build)
        choco install nasm jom -y
        # Add NASM to PATH for current session
        $env:PATH = "$env:PATH;C:\Program Files\NASM"
        # Verify NASM installation
        nasm -v
        echo "cmake -DPython3_ROOT_DIR=$env:pythonLocation"
        cmake "-DPython3_ROOT_DIR=$env:pythonLocation" -DPython3_FIND_REGISTRY=LAST -DCMAKE_BUILD_TYPE=Release -DZSWAG_ENABLE_TESTING=ON -DZSWAG_VERSION="${{ needs.determine-version.outputs.version }}" ..
        cmake --build . --config Release
    - name: Deploy
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: build/bin/wheel/*.whl
    - name: Test
      working-directory: build
      run: |
        ctest -C Release --verbose --no-tests=error

  deploy:
    needs: [determine-version, build-manylinux, build]
    if: |
      success() && 
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          pip install setuptools wheel setuptools_scm twine
      
      - name: Validate version
        run: |
          python .github/scripts/validate_version.py
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist/
          merge-multiple: true
      
      - name: List wheels
        run: |
          echo "Downloaded wheels:"
          ls -la dist/
          echo "Wheel details:"
          ls dist/*.whl
      
      - name: Build source distribution for zswag
        run: |
          # Create source distribution for pure Python package
          python setup.py ${{ needs.determine-version.outputs.version }} sdist --dist-dir dist/
      
      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.KE_PYPI_TOKEN }}
        run: |
          # For main branch, upload to TestPyPI first (optional)
          # For tags, upload to PyPI
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "Uploading development version to PyPI..."
          else
            echo "Uploading release version to PyPI..."
          fi
          
          twine upload \
            --non-interactive \
            --skip-existing \
            --verbose \
            dist/*

  manual-snapshot:
    needs: [determine-version, build-manylinux, build]
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      SETUPTOOLS_SCM_PRETEND_VERSION: ${{ needs.determine-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install setuptools wheel setuptools_scm

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist/
          merge-multiple: true

      - name: Build source distribution for zswag
        run: |
          python setup.py ${{ needs.determine-version.outputs.version }} sdist --dist-dir dist/

      - name: Create release tag name
        id: release_info
        run: |
          # Sanitize branch name for release tag
          REF_NAME="${{ github.event.inputs.ref }}"
          SLUG=$(echo "$REF_NAME" | sed 's/[^A-Za-z0-9]/-/g' | sed 's/^-*//' | sed 's/-*$//' | tr '[:upper:]' '[:lower:]')
          if [ -z "$SLUG" ]; then
            SLUG="snapshot"
          fi
          SHORT_SHA=$(git rev-parse --short HEAD)
          RELEASE_TAG="snapshot-${SLUG}-${SHORT_SHA}"
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Create GitHub pre-release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION="${{ needs.determine-version.outputs.version }}"
          RELEASE_TAG="${{ steps.release_info.outputs.release_tag }}"
          SHORT_SHA="${{ steps.release_info.outputs.short_sha }}"
          CUSTOM_NOTES="${{ github.event.inputs.release_notes }}"

          # Build release notes
          cat > release_notes.md <<'EOF'
          ## Test Snapshot from ${{ github.event.inputs.ref }}

          **Version:** `${{ needs.determine-version.outputs.version }}`
          **Commit:** `${{ steps.release_info.outputs.short_sha }}`
          **Build:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ### Installation Instructions

          This is a test snapshot for customer verification. To install:

          1. **Use a virtual environment** (recommended):
             ```bash
             python -m venv venv
             source venv/bin/activate  # On Windows: venv\Scripts\activate
             ```
             [Learn more about virtual environments](https://docs.python.org/3/tutorial/venv.html)

          2. **Install/upgrade both packages** (force reinstall to ensure version consistency):
             ```bash
             pip install --force-reinstall dist/pyzswagcl-${VERSION}-*.whl dist/zswag-${VERSION}-*.whl
             ```

          ⚠️ **Warning:** This will remove any existing `zswag` and `pyzswagcl` installations.

          ### Direct Installation from Release

          You can install directly from this release (replace `<platform-python>` with your platform, e.g., `cp310-manylinux_x86_64`):
          ```bash
          pip install --force-reinstall \
            https://github.com/${{ github.repository }}/releases/download/${RELEASE_TAG}/pyzswagcl-${VERSION}-<platform-python>.whl \
            https://github.com/${{ github.repository }}/releases/download/${RELEASE_TAG}/zswag-${VERSION}-py3-none-any.whl
          ```

          EOF

          # Add custom notes if provided
          if [ -n "$CUSTOM_NOTES" ]; then
            echo "" >> release_notes.md
            echo "### Release Notes" >> release_notes.md
            echo "" >> release_notes.md
            echo "$CUSTOM_NOTES" >> release_notes.md
          fi

          # Create the pre-release
          gh release create "${RELEASE_TAG}" \
            --prerelease \
            --target "${{ github.event.inputs.ref }}" \
            --title "Test Snapshot: ${{ github.event.inputs.ref }} (${SHORT_SHA})" \
            --notes-file release_notes.md \
            dist/*
