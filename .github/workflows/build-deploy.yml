name: Build and Deploy

on:
  push:
    branches: [master]
    tags: ['v*']
  pull_request:

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install setuptools_scm
        run: pip install setuptools_scm
      
      - name: Get version
        id: version
        run: |
          VERSION=$(python -c "import setuptools_scm; print(setuptools_scm.get_version(local_scheme='no-local-version'))")
          echo "Version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-manylinux:
    needs: [determine-version]
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    runs-on: ubuntu-latest
    container: ghcr.io/klebert-engineering/manylinux-cpp17-py${{ matrix.python-version }}-x86_64:2025.1
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
    steps:
      - name: Which Node.js?
        run: |
          echo "Node at $(which node): $(node -v); npm: $(npm -v)"
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure
        run: |
          python3 -m venv venv && . ./venv/bin/activate
          pip install -U setuptools wheel pip conan==2.5.0
          mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -DZSWAG_ENABLE_TESTING=ON -DZSWAG_VERSION=${{ needs.determine-version.outputs.version }} ..
      - name: Build
        working-directory: build
        run: |
          export LD_LIBRARY_PATH=$(pwd)/bin:${LD_LIBRARY_PATH}
          . ../venv/bin/activate
          cmake --build .
          mv bin/wheel bin/wheel-auditme
          mkdir bin/wheel && mv bin/wheel-auditme/zswag*.whl bin/wheel
          auditwheel repair bin/wheel-auditme/pyzswagcl*.whl -w bin/wheel
      - name: Test
        working-directory: build
        run: |
          . ../venv/bin/activate
          ctest -C Release --verbose --no-tests=error
      - name: Deploy
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-py${{ matrix.python-version }}
          path: build/bin/wheel/*.whl
  
  build:
    needs: [determine-version]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macos-13: Intel-based runners (x86_64)
        # macos-14: Apple Silicon runners (arm64)
        os: [macos-13, macos-14, windows-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        exclude:
          # Python 3.10 doesn't have ARM64 builds for macOS
          - os: macos-14
            python-version: "3.10"
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Cache Conan packages
      uses: actions/cache@v4
      with:
        path: ~/.conan/data
        key: ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.txt') }}
        restore-keys: |
          ${{ runner.os }}-conan-
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64
    - run: python -m pip install setuptools wheel conan==2.5.0
    - run: mkdir build
    - name: Build (macOS)
      if: startsWith(matrix.os, 'macos')
      working-directory: build
      run: |
        # Set deployment target based on architecture
        # macos-13 = Intel x86_64, macos-14 = Apple Silicon arm64
        if [[ "${{ matrix.os }}" == "macos-13" ]]; then
          export MACOSX_DEPLOYMENT_TARGET=10.15
        else
          export MACOSX_DEPLOYMENT_TARGET=11.0  # ARM64 requires macOS 11.0+
        fi
        python -m pip install delocate
        cmake -DPython3_ROOT_DIR=$pythonLocation \
              -DPython3_FIND_FRAMEWORK=LAST \
              -DCMAKE_BUILD_TYPE=Release \
              -DHTTPLIB_USE_BROTLI_IF_AVAILABLE=OFF \
              -DZSWAG_ENABLE_TESTING=ON \
              -DZSWAG_VERSION=${{ needs.determine-version.outputs.version }} ..
        cmake --build .
        mv bin/wheel bin/wheel-auditme  # Same as on Linux
        mkdir bin/wheel && mv bin/wheel-auditme/zswag*.whl bin/wheel
        _deps/python-cmake-wheel-src/repair-wheel-macos.bash \
              "$(pwd)"/bin/wheel-auditme/pyzswagcl*.whl \
              "$(pwd)"/bin/wheel pyzswagcl
    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: build
      run: |
        echo "cmake -DPython3_ROOT_DIR=$env:pythonLocation"
        cmake "-DPython3_ROOT_DIR=$env:pythonLocation" -DPython3_FIND_REGISTRY=LAST -DCMAKE_BUILD_TYPE=Release -DZSWAG_ENABLE_TESTING=ON -DZSWAG_VERSION=${{ needs.determine-version.outputs.version }} ..
        cmake --build . --config Release
    - name: Deploy
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: build/bin/wheel/*.whl
    - name: Test
      working-directory: build
      run: |
        ctest -C Release --verbose --no-tests=error

  deploy:
    needs: [determine-version, build-manylinux, build]
    if: |
      success() && 
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          pip install setuptools wheel setuptools_scm twine
      
      - name: Validate version
        run: |
          python .github/scripts/validate_version.py
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist/
          merge-multiple: true
      
      - name: List wheels
        run: |
          echo "Downloaded wheels:"
          ls -la dist/
          echo "Wheel details:"
          ls dist/*.whl
      
      - name: Build source distribution for zswag
        run: |
          # Create source distribution for pure Python package
          python setup.py ${{ needs.determine-version.outputs.version }} sdist --dist-dir dist/
      
      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.KE_PYPI_TOKEN }}
        run: |
          # For main branch, upload to TestPyPI first (optional)
          # For tags, upload to PyPI
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "Uploading development version to PyPI..."
          else
            echo "Uploading release version to PyPI..."
          fi
          
          twine upload \
            --non-interactive \
            --skip-existing \
            --verbose \
            dist/*
